// prettier-ignore
export const TypeList = ['ノーマル','かくとう','ひこう','どく','じめん','いわ','むし','ゴースト','はがね','ほのお','みず','くさ','でんき','エスパー','こおり','ドラゴン','あく','フェアリー'] as const;
type TypeTuple = typeof TypeList;
export type Type = TypeTuple[number];

// prettier-ignore
export const IngredientList = [
  'バグメモリ','ねばりのかぎづめ','ぎんのこな','きれいなぬけがら','タンガのみ','あまいミツ',/* ,'ナゾのみ' */
  'ダークメモリ','あやしいパッチ','じゃくてんほけん','するどいツメ','からぶりほけん','こうかくレンズ','フォーカスレンズ','くろいメガネ','ねらいのまと','ピントレンズ','しめつけバンド','タラプのみ','レンブのみ','ナモのみ','イアのみ','くろぼんぐり',
  'ドラゴンメモリ','しんかのきせき','いのちのたま','りゅうのキバ','りゅうのウロコ','カセキのリュウ','ダイマックスアメ','ジャポのみ','バンジのみ','ハバンのみ',
  'エレクトロメモリ','でんきだま','じしゃく','じゅうでんち','カセキのトリ','エレキシード','かみなりのいし','ソクノのみ','モモンのみ','あおぼんぐり',
  'フェアリーメモリ','ベリーアメざいく','よつばアメざいく','おはなアメざいく','ハートアメざいく','リボンアメざいく','スターアメざいく','いちごアメざいく','ホイップポップ','においぶくろ','ひかりのこな','ミストシード','アッキのみ','つきのいし','ひかりのいし','ロゼルのみ','せいれいプレート','ももぼんぐり',
  'ファイトメモリ','たつじんのおび','ヨロイこうせき','きょうせいギプス','こだわりハチマキ','パワーアンクル','パワーバンド','パワーベルト','パワーリスト','パワーウエイト','くろおび','ちからのハチマキ','きあいのハチマキ','きあいのタスキ','ぼうごパット','カムラのみ','ネコブのみ','リゾチウム','インドメタシン','ヨプのみ','マックスアップ','ブロムヘキシン','タウリン','キトサン','ヒメリのみ',
  'ファイヤーメモリ','もくたん','レッドカード','かえんだま','あついいわ','ほのおのいし','たいようのいし','フィラのみ','オッカのみ','クラボのみ','あかぼんぐり',
  'フライングメモリ','ふうせん','ばんのうがさ','するどいくちばし','サンのみ','せいしんのハネ','ちりょくのハネ','ウブのみ','たいりょくのハネ','きんりょくのハネ','きれいなハネ','ていこうのハネ','しゅんぱつのハネ','バコウのみ','ラムのみ',
  'ゴーストメモリ','れいかいのぬの','のろいのおふだ','きよめのおふだ','ビビリだま','イバンのみ','やみのいし','カシブのみ','マゴのみ','あやしいおこう',
  'グラスメモリ','あまーいりんご','すっぱいりんご','かおるキノコ','たべのこし','ながねぎ','いじっぱりミント','ずぶといミント','ゆうかんミント','おだやかミント','しんちょうミント','おとなしいミント','せっかちミント','わんぱくミント','ようきミント','のうてんきミント','さみしがりミント','おっとりミント','ひかえめミント','むじゃきミント','やんちゃミント','れいせいミント','うっかりやミント','のんきミント','なまいきミント','まじめミント','おくびょうミント','おおきなキノコ','メンタルハーブ','きせきのタネ','しろいハーブ','チイラのみ','パワフルハーブ','くっつきバリ','きゅうこん','おおきなねっこ','グラスシード','ひかりごけ','リーフのいし','ガラナツのえだ','リンドのみ','チーゴのみ','おはなのおこう','ちいさなキノコ','みどぼんぐり',
  'グラウンドメモリ','でかいきんのたま','かけたポット','われたポット','やわらかいすな','ふといホネ','きんのたま','あつぞこブーツ','ズアのみ','きちょうなホネ','グランドコート','ほしのすな','ロメのみ','シュカのみ','キーのみ',
  'アイスメモリ','すいせいのかけら','とけないこおり','リュガのみ','つめたいいわ','カセキのクビナガ','ゆきだま','こおりのいし','ザクロのみ','ヤチェのみ','ナナシのみ','とくせいカプセル','ポイントマックス','ポイントアップ','おまもりこばん','アップグレード','スピードパウダー','せんせいのツメ','シルクのスカーフ','こだわりスカーフ','しあわせタマゴ','ぼうじんゴーグル','ノーマルジュエル','ホズのみ','まんぷくおこう','こううんのおこう','しろぼんぐり',
  'ポイズンメモリ','どくバリ','ねがいのかたまり','けむりだま','ガラナツブレス','どくどくだま','ヤタピのみ','くろいヘドロ','タポルのみ','ビアーのみ','ゴールドスプレー','オレンのみ','むしよけスプレー','シルバースプレー','ふしぎなアメ',
  'サイキックメモリ','あかいいと','ルームサービス','こだわりメガネ','ひかりのねんど','パワーレンズ','まがったスプーン','けいけんアメXL','スターのみ','ものしりメガネ','けいけんアメL','サイコシード','めざめのいし','けいけんアメM','マトマのみ','けいけんアメS','ウタンのみ','けいけんアメXS','のんきのおこう','きよめのおこう','オボンのみ',
  'ロックメモリ','ゴツゴツメット','プロテクター','かわらずのいし','ほしのかけら','かたいいし','まんまるいし','さらさらいわ','こうこうのしっぽ','ミクルのみ','かるいし','ヨロギのみ','ウィのみ','がんせきおこう','ぎんのおうかん','きんのおうかん',
  'スチールメモリ','おうじゃのしるし','メタルコート','メトロノーム','とつげきチョッキ','だっしゅつボタン','だっしゅつパック','くろいてっきゅう','メタルパウダー','やすらぎのすず','リリバのみ','くちたたて','くちたけん',
  'ウオーターメモリ','おだんごしんじゅ','きれいなウロコ','かいがらのすず','おおきなしんじゅ','しめったいわ','のどスプレー','カセキのサカナ','しんぴのしずく','しんじゅ','みずのいし','イトケのみ','カゴのみ','うしおのおこう','さざなみのおこう','きぼんぐり',
] as const ;
type IngredientListTuple = typeof IngredientList;
export type Ingredient = IngredientListTuple[number];

export type IngredientSpec = {
  name: Ingredient;
  type: Type;
  score: number;
};

/*
 * 「as const した stringの配列」から union 型を作り出しているが理解できない。
 *
 * 欲しいもの
 * type MyUnion = 'ありがとう' | 'Thanks'; // Union型
 *
 * 上記と同じものを string 配列から作りだす
 * const MyList = ['ありがとう', 'Thanks'] as const;
 * type MyTuple = typeof MyList; // readonly ['ありがとう', 'Thanks']
 * type MyUnion = MyTuple[number]; // Union型
 *
 * 参考: https://stackoverflow.com/questions/44480644/typescript-string-union-to-string-array
 */
// prettier-ignore
export const StandardProductList = [
  'ふるいたてる','ゆびをふる','こらえる','きあいだめ','ねごと','さわぐ','のしかかり','トライアタック','バトンタッチ','アンコール',
  'みがわり','つるぎのまい','ハイパーボイス','ぎんのおうかん','ポイントアップ','けたぐり','はどうだん','ちからのハチマキ','ねがいのかたまり','ビルドアップ',
  'きしかいせい','きょうせいギプス','ボディプレス','たつじんのおび','きあいだま','ばかぢから','インファイト','ふしぎなアメ','きれいなハネ','するどいくちばし',
  'おおきなキノコ','ふうせん','からぶりほけん','ねばりのかぎづめ','じゃくてんほけん','ぼうふう','すいせいのかけら','ブレイブバード','くろいヘドロ','どくどくだま',
  'ベノムトラップ','どくびし','けむりだま','どくづき','スピードパウダー','どくバリ','ヘドロばくだん','ヘドロウェーブ','ダストシュート','ほしのすな',
  'まきびし','ひかりのねんど','ドリルライナー','だいちのちから','グランドコート','おだんごしんじゅ','10まんばりき','じしん','かるいし','まんまるいし',
  'かたいいし','かわらずのいし','プロテクター','ゴツゴツメット','パワージェム','しんかのきせき','ステルスロック','ストーンエッジ','シザークロス','きゅうけつ',
  'ひかりのこな','ぎんのこな','かおるキノコ','むしのさざめき','きれいなぬけがら','かふんだんご','メガホーン','あやしいおこう','ビビリだま','ねらいのまと',
  'ほしのかけら','きよめのおふだ','のろいのおふだ','われたポット','れいかいのぬの','シャドーボール','アイアンテール','てっぺき','メタルパウダー','ばんのうがさ',
  'メタルコート','ジャイロボール','とつげきチョッキ','ヘビーボンバー','おまもりこばん','ラスターカノン','アイアンヘッド','ヒートスタンプ','かえんだま','ブレイズキック',
  'かえんほうしゃ','ねっぷう','レッドカード','だいもんじ','もくたん','フレアドライブ','オーバーヒート','うしおのおこう','なみのり','かいがらのすず',
  'たきのぼり','アクアブレイク','きれいなウロコ','しんぴのしずく','だくりゅう','ねっとう','ハイドロポンプ','グラスシード','タネばくだん','しろいハーブ',
  'くさむすび','リーフブレード','エナジーボール','きゅうこん','パワーウィップ','リーフストーム','エレキシード','エレキボール','じゅうでんち','じしゃく',
  'ワイルドボルト','アップグレード','でんきだま','あやしいパッチ','10まんボルト','かみなり','こうそくいどう','みらいよち','スキルスワップ','アシストパワー',
  'コスモパワー','サイドチェンジ','サイコショック','しねんのずつき','ドわすれ','トリック','めいそう','サイコファング','サイコキネシス','ゆきだま',
  'つめたいいわ','とけないこおり','するどいツメ','れいとうビーム','ふぶき','ドラゴンクロー','りゅうのキバ','りゅうのウロコ','いのちのたま',
  'りゅうのはどう','おうじゃのしるし','りゅうのまい','げきりん','ちょうはつ','こうかくレンズ','わるだくみ','イカサマ','ピントレンズ','じごくづき',
  'あくのはどう','かみくだく','DDラリアット','ミストシード','においぶくろ','ルームサービス','ホイップホップ','あかいいと',
  'ベリーアメざいく','よつばアメざいく','おはなアメざいく','ハートアメざいく','リボンアメざいく','スターアメざいく','いちごアメざいく','マジカルシャイン','じゃれつく'
] as const;
type StandardProductTuple = typeof StandardProductList;
export type StandardProduct = StandardProductTuple[number];
export type StandardProductRecipe = {
  type: Type;
  scores: number[];
};

// prettier-ignore
export const GuaranteedProductList = [
  'おおきなキノコ','おおきなしんじゅ','ほしのかけら','かおるキノコ','でかいきんのたま','おだんごしんじゅ','すいせいのかけら','とくせいカプセル','きんのおうかん'
] as const;
type GuaranteedProductTuple = typeof GuaranteedProductList;
export type GuaranteedProduct = GuaranteedProductTuple[number];
export type GuaranteedProductRecipe = {
  triggerIngredient: Ingredient;
  product: GuaranteedProduct;
};

// prettier-ignore
export const BallProductList = [
  'モンスターボール','スーパーボール','ハイパーボール'
  ,'ダークボール','ダイブボール','プレミアボール','ゴージャスボール','ネットボール','ネストボール','ヒールボール','リピートボール','タイマーボール','クイックボール'
  ,'ヘビーボール','ルアーボール','フレンドボール','ラブラブボール','レベルボール','スピードボール','ムーンボール','サファリボール','コンペボール'
] as const;
type BallProductTuple = typeof BallProductList;
export type BallProduct = BallProductTuple[number];
export type BallProductRecipe = {
  apricorn: Ingredient;
  balls: Array<{name: BallProduct; rate: number}>;
};

export const ProductList = [
  ...StandardProductList,
  ...GuaranteedProductList,
  ...BallProductList,
].filter((v, i, self) => {
  return i === self.indexOf(v);
});
export type Product = StandardProduct | GuaranteedProduct | BallProduct;
export type ProductPossibility = {
  name: Product;
  rate: number;
};

export function isIngredient(arg: any): arg is Ingredient {
  if (typeof arg === 'string') {
    if (IngredientList.includes(arg as Ingredient)) {
      return true;
    }
  }
  return false;
}

export function isProduct(arg: any): arg is Product {
  if (typeof arg === 'string') {
    if (
      isStandardProduct(arg) ||
      isGuaranteedProduct(arg) ||
      isBallProduct(arg)
    ) {
      return true;
    }
  }
  return false;
}

export function isStandardProduct(arg: any): arg is StandardProduct {
  if (typeof arg === 'string') {
    if (StandardProductList.includes(arg as StandardProduct)) {
      return true;
    }
  }
  return false;
}

export function isGuaranteedProduct(arg: any): arg is GuaranteedProduct {
  if (typeof arg === 'string') {
    if (GuaranteedProductList.includes(arg as GuaranteedProduct)) {
      return true;
    }
  }
  return false;
}

export function isBallProduct(arg: any): arg is BallProduct {
  if (typeof arg === 'string') {
    if (BallProductList.includes(arg as BallProduct)) {
      return true;
    }
  }
  return false;
}
